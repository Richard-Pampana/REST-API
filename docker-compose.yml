# # On declare les différentes applications
# services:
#   # D'abord, on a le frontend: Une page web statique qui fera office de client pour notre API
#   frontend:
#     # On utilise nginx pour Servir ledit site (Image alpine pour la légereté)
#     image: nginx:1.16.0-alpine
#     # On rend le service accessible sur le port 8082 de votre machine
#     ports:
#       - 8085:80

#     # Le volume bindé au dessier 'front' permet de modifier le code de 'front' et que ce soit pris en compte immédiatement, pour vous faciliter la vie
#     volumes:
#       - ./front:/usr/share/nginx/html/

#   # Ensuite, le service de l'API: c'est un API fait avec PHP, qui vous permettra d'assimiler les principes des API Web rapidement en pratiquant.
#   api:
#     # On utilise une image avec PHP et Apache pour servir l'API.
#     image: php:8-apache
#     # On bind le port 8081 de la machine avec le 80 du conteneur pour pouvoir tester et acceder à l'API
#     ports:
#       - 8084:80
#     # Le code est contenu dans le dossier 'api' et est pris en compte quand on le modifie, comme pour le front.
#     volumes:
#       - ./api:/var/www/html/

#   # C'est une base de données qui nous servira plus tard dans le cours !
#   database:
#     image: postgres
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     ports:
#       - 5432:5432
#     environment:
#       - POSTGRES_PASSWORD=password

#   # C'est un outil qui nous servira à gérer la base de données avec une interface graphique !
#   pgadmin:
#     image: dpage/pgadmin4
#     ports:
#       - 5433:80
#     depends_on:
#       - database
#     environment:
#       - POSTGRES_PASSWORD=password
#       - PGADMIN_DEFAULT_EMAIL=admin@mail.me
#       - PGADMIN_DEFAULT_PASSWORD=password

# # Déclaration des volumes en dehors des services
# volumes:
#   pgadmin-data:
#   db-data:

version: '3.9'

services:
  node_app:
    container_name: node_app
    build: .
    image: postgres/node_live_app
    ports:
      - "3000:3000"
    environment:
      - PG_DB=node_live_app
      - PG_USER=postgres
      - PG_PASSWORD=password
      - PG_HOST=node_db
    depends_on:
      - node_db
    restart: always

  node_db:
    container_name: node_db
    image: postgres:12
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=node_live_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - node_db_data:/var/lib/postgresql/data

volumes:
  node_db_data: {}
